================================================================
        SOLUÇÃO MELHOR: SISTEMA DE ARQUIVOS NO SERVIDOR
        Sem File System Access API - Funciona em TODOS os navegadores
================================================================

PROBLEMA ATUAL:
- File System Access API é complicado
- Precisa selecionar pasta manualmente
- Não funciona em Firefox/Safari
- Experiência ruim ("muito feio")

SOLUÇÃO PROPOSTA:
Sistema de arquivos gerenciado pelo SERVIDOR (como Google Docs, Overleaf)

================================================================
ARQUITETURA NOVA:
================================================================

ESTRUTURA DE PASTAS NO SERVIDOR:
uploads/
├── project_1/
│   ├── main.tex
│   ├── references.bib
│   └── images/
│       ├── logo.png
│       └── diagram.pdf
├── project_2/
│   ├── article.tex
│   └── images/
│       └── graph.jpg
└── project_3/
    └── thesis.tex

BANCO DE DADOS:
- Tabela: project_files
  * id
  * project_id (FK)
  * filename
  * filepath (relativo a project_X/)
  * file_type (tex, image, bib, etc)
  * size
  * created_at
  * updated_at

================================================================
FUNCIONALIDADES:
================================================================

1. GERENCIADOR DE ARQUIVOS NA SIDEBAR
   ├─ 📁 Meu Projeto
   │   ├─ 📄 main.tex (ativo)
   │   ├─ 📄 references.bib
   │   └─ 📁 images/
   │       ├─ 🖼️ logo.png
   │       └─ 🖼️ diagram.pdf

2. OPERAÇÕES:
   ✓ Criar arquivo .tex
   ✓ Upload de imagens
   ✓ Renomear arquivos
   ✓ Excluir arquivos
   ✓ Criar pastas
   ✓ Mover arquivos entre pastas
   ✓ Download individual
   ✓ Download ZIP do projeto

3. EDITOR:
   ✓ Abrir arquivo clicando na lista
   ✓ Múltiplas abas (tabs)
   ✓ Salvar automaticamente
   ✓ Sincronização em tempo real

4. IMAGENS:
   ✓ Upload via drag-and-drop
   ✓ Preview na sidebar
   ✓ Inserir com clique
   ✓ Gerenciar (renomear, excluir)

================================================================
VANTAGENS:
================================================================

✓ Funciona em TODOS os navegadores
✓ Sem permissões complicadas
✓ Experiência profissional
✓ Backup automático no servidor
✓ Compartilhamento fácil
✓ Colaboração em tempo real (futuro)
✓ Acesso de qualquer dispositivo
✓ Versionamento integrado
✓ Sincronização automática
✓ Interface limpa e bonita

================================================================
DESVANTAGENS DO FILE SYSTEM ACCESS API:
================================================================

❌ Suporte limitado (só Chrome/Edge)
❌ Experiência confusa
❌ Precisa selecionar pasta toda vez (ou quase)
❌ Não funciona em mobile
❌ Não funciona em Firefox/Safari
❌ Difícil de explicar para usuários
❌ Problemas de permissão
❌ Não sincroniza entre dispositivos
❌ Sem backup automático
❌ "Muito feio" (palavras do usuário)

================================================================
IMPLEMENTAÇÃO PROPOSTA:
================================================================

BACKEND (Flask):

1. API de Arquivos:
   POST   /api/project/<id>/files          - Upload arquivo
   GET    /api/project/<id>/files          - Listar arquivos
   GET    /api/project/<id>/files/<file_id> - Baixar arquivo
   PUT    /api/project/<id>/files/<file_id> - Atualizar arquivo
   DELETE /api/project/<id>/files/<file_id> - Excluir arquivo
   POST   /api/project/<id>/files/rename    - Renomear arquivo
   POST   /api/project/<id>/files/move      - Mover arquivo

2. Modelo de Dados:
   class ProjectFile(db.Model):
       id = db.Column(db.Integer, primary_key=True)
       project_id = db.Column(db.Integer, db.ForeignKey('project.id'))
       filename = db.Column(db.String(255))
       filepath = db.Column(db.String(500))
       file_type = db.Column(db.String(50))
       size = db.Column(db.Integer)
       content = db.Column(db.Text)  # Para .tex
       created_at = db.Column(db.DateTime)
       updated_at = db.Column(db.DateTime)

FRONTEND (JavaScript):

1. FileManager Class:
   - loadFiles()
   - uploadFile(file)
   - deleteFile(fileId)
   - renameFile(fileId, newName)
   - openFile(fileId)
   - saveFile(fileId, content)

2. UI Components:
   - Árvore de arquivos (sidebar)
   - Abas de arquivos abertos
   - Upload drag-and-drop
   - Context menu (botão direito)
   - Preview de imagens

================================================================
INTERFACE PROPOSTA:
================================================================

┌────────────────────────────────────────────────────────────┐
│ [← Voltar] DocCollab - Meu Projeto                        │
├────────────────────────────────────────────────────────────┤
│ ┌──────────┬──────────────────────────────────────────────┐│
│ │ 📁 Arquivos                                              ││
│ │ ├─ 📄 main.tex (ativo)                                   ││
│ │ ├─ 📄 chapter1.tex                                       ││
│ │ ├─ 📄 references.bib                                     ││
│ │ └─ 📁 images/                                            ││
│ │     ├─ 🖼️ logo.png                                       ││
│ │     └─ 🖼️ diagram.pdf                                    ││
│ │                                                          ││
│ │ [+ Novo Arquivo] [↑ Upload]                              ││
│ └──────────┴──────────────────────────────────────────────┘│
│                                                            │
│ ┌──────────────────────────────────────────────────────────┐│
│ │ [main.tex ×] [chapter1.tex ×]                           ││
│ ├──────────────────────────────────────────────────────────┤│
│ │ \documentclass{article}                                  ││
│ │ \begin{document}                                         ││
│ │ ...                                                      ││
│ │                                                          ││
│ └──────────────────────────────────────────────────────────┘│
│                                                            │
│ [Compilar] [Visualizar PDF] [Salvar] [Linter] [Chat]      │
└────────────────────────────────────────────────────────────┘

================================================================
FLUXO DE USO:
================================================================

1. CRIAR PROJETO:
   - Usuário clica "Novo Projeto"
   - Sistema cria pasta uploads/project_X/
   - Sistema cria main.tex padrão

2. ADICIONAR ARQUIVOS:
   - Clica "+ Novo Arquivo"
   - OU arrasta arquivo para upload
   - Sistema salva em uploads/project_X/

3. EDITAR ARQUIVO:
   - Clica no arquivo na lista
   - Abre em nova aba
   - Edita normalmente
   - Salva (Ctrl+S ou auto-save)

4. ADICIONAR IMAGEM:
   - Arrasta imagem para área de upload
   - Sistema salva em uploads/project_X/images/
   - Clica "Inserir" para adicionar ao .tex

5. COMPILAR:
   - Clica "Compilar"
   - Sistema compila no servidor
   - Mostra PDF ou erros

================================================================
MIGRAÇÃO DO SISTEMA ATUAL:
================================================================

PASSO 1: Remover File System Access API
- Remover requestWorkingDirectory()
- Remover IndexedDB
- Remover botão de seleção de pasta

PASSO 2: Implementar API de Arquivos
- Criar rotas Flask
- Criar modelo ProjectFile
- Implementar upload/download

PASSO 3: Atualizar Frontend
- Criar FileManager.js
- Atualizar sidebar
- Implementar abas
- Drag-and-drop

PASSO 4: Migrar Arquivos Existentes
- Script para importar arquivos da pasta "Arquivos"
- Associar a projetos existentes

================================================================
EXEMPLO DE CÓDIGO:
================================================================

BACKEND (app.py):

@app.route('/api/project/<int:project_id>/files', methods=['GET'])
@login_required
def get_project_files(project_id):
    project = Project.query.get_or_404(project_id)
    if project.user_id != current_user.id:
        return jsonify({'error': 'Unauthorized'}), 403
    
    files = ProjectFile.query.filter_by(project_id=project_id).all()
    return jsonify([{
        'id': f.id,
        'filename': f.filename,
        'filepath': f.filepath,
        'type': f.file_type,
        'size': f.size,
        'updated_at': f.updated_at.isoformat()
    } for f in files])

@app.route('/api/project/<int:project_id>/files', methods=['POST'])
@login_required
def upload_file(project_id):
    project = Project.query.get_or_404(project_id)
    if project.user_id != current_user.id:
        return jsonify({'error': 'Unauthorized'}), 403
    
    file = request.files['file']
    filename = secure_filename(file.filename)
    
    # Salvar arquivo
    project_dir = os.path.join(UPLOAD_FOLDER, f'project_{project_id}')
    os.makedirs(project_dir, exist_ok=True)
    filepath = os.path.join(project_dir, filename)
    file.save(filepath)
    
    # Salvar no banco
    project_file = ProjectFile(
        project_id=project_id,
        filename=filename,
        filepath=filename,
        file_type=get_file_type(filename),
        size=os.path.getsize(filepath)
    )
    db.session.add(project_file)
    db.session.commit()
    
    return jsonify({'success': True, 'file_id': project_file.id})

FRONTEND (file_manager.js):

class FileManager {
    constructor(projectId) {
        this.projectId = projectId;
        this.files = [];
        this.activeFile = null;
    }
    
    async loadFiles() {
        const response = await fetch(`/api/project/${this.projectId}/files`);
        this.files = await response.json();
        this.renderFileTree();
    }
    
    async uploadFile(file) {
        const formData = new FormData();
        formData.append('file', file);
        
        const response = await fetch(`/api/project/${this.projectId}/files`, {
            method: 'POST',
            body: formData
        });
        
        if (response.ok) {
            await this.loadFiles();
            showNotification('✓ Arquivo enviado!', 'success');
        }
    }
    
    async openFile(fileId) {
        const response = await fetch(`/api/project/${this.projectId}/files/${fileId}`);
        const content = await response.text();
        
        // Abrir em nova aba
        this.openTab(fileId, content);
    }
    
    renderFileTree() {
        const tree = document.getElementById('fileTree');
        tree.innerHTML = this.files.map(file => `
            <div class="file-item" onclick="fileManager.openFile(${file.id})">
                <i class="fas fa-${getFileIcon(file.type)}"></i>
                <span>${file.filename}</span>
            </div>
        `).join('');
    }
}

================================================================
CRONOGRAMA DE IMPLEMENTAÇÃO:
================================================================

FASE 1: Backend (2-3 horas)
- ✓ Criar modelo ProjectFile
- ✓ Criar rotas de API
- ✓ Implementar upload/download
- ✓ Testes básicos

FASE 2: Frontend (3-4 horas)
- ✓ Criar FileManager.js
- ✓ Atualizar sidebar
- ✓ Implementar drag-and-drop
- ✓ Sistema de abas

FASE 3: Integração (1-2 horas)
- ✓ Conectar com editor
- ✓ Salvar/carregar arquivos
- ✓ Compilação com múltiplos arquivos

FASE 4: Polimento (1-2 horas)
- ✓ UI/UX
- ✓ Animações
- ✓ Feedback visual
- ✓ Testes finais

TOTAL: 7-11 horas de trabalho

================================================================
DECISÃO:
================================================================

OPÇÃO A: Continuar com File System Access API
❌ Complicado
❌ Limitado
❌ "Muito feio"

OPÇÃO B: Sistema de Arquivos no Servidor (RECOMENDADO)
✓ Profissional
✓ Funciona em todos navegadores
✓ Melhor experiência
✓ Mais recursos
✓ Escalável

================================================================
RECOMENDAÇÃO:
================================================================

Implementar OPÇÃO B: Sistema de Arquivos no Servidor

MOTIVOS:
1. Experiência muito melhor
2. Funciona em todos navegadores
3. Mais profissional
4. Permite colaboração futura
5. Backup automático
6. Sincronização entre dispositivos
7. Interface bonita e intuitiva
8. Sem complicações de permissões

================================================================
QUER QUE EU IMPLEMENTE?
================================================================

Posso implementar o sistema completo de arquivos no servidor agora!

Vai ficar MUITO MELHOR que o File System Access API!

✓ Interface bonita
✓ Funciona perfeitamente
✓ Sem complicações
✓ Profissional

Confirma para eu começar? 🚀






