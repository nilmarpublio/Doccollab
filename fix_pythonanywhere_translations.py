#!/usr/bin/env python3
"""
Script para corrigir tradu√ß√µes no PythonAnywhere
"""

import os
import subprocess
import sys

def run_command(cmd, description):
    """Executa um comando e mostra o resultado"""
    print(f"\nüîß {description}")
    print(f"Comando: {cmd}")
    try:
        result = subprocess.run(cmd, shell=True, capture_output=True, text=True, cwd='/home/123nilmarcastro/doccollab')
        if result.returncode == 0:
            print(f"‚úÖ Sucesso: {result.stdout}")
        else:
            print(f"‚ùå Erro: {result.stderr}")
            return False
    except Exception as e:
        print(f"‚ùå Exce√ß√£o: {e}")
        return False
    return True

def main():
    print("üöÄ CORRIGINDO TRADU√á√ïES NO PYTHONANYWHERE")
    print("=" * 50)
    
    # Verificar se estamos no diret√≥rio correto
    if not os.path.exists('/home/123nilmarcastro/doccollab'):
        print("‚ùå Diret√≥rio /home/123nilmarcastro/doccollab n√£o encontrado!")
        return
    
    # Ativar ambiente virtual
    print("\n1. Ativando ambiente virtual...")
    os.environ['PATH'] = '/home/123nilmarcastro/doccollab/venv/bin:' + os.environ['PATH']
    os.environ['VIRTUAL_ENV'] = '/home/123nilmarcastro/doccollab/venv'
    
    # Verificar se pybabel est√° instalado
    if not run_command('which pybabel', 'Verificando pybabel'):
        print("‚ùå pybabel n√£o encontrado. Instalando...")
        if not run_command('pip install babel', 'Instalando babel'):
            return
    
    # Verificar estrutura de tradu√ß√µes
    print("\n2. Verificando estrutura de tradu√ß√µes...")
    translations_dir = '/home/123nilmarcastro/doccollab/translations'
    if not os.path.exists(translations_dir):
        print("‚ùå Diret√≥rio translations n√£o encontrado!")
        return
    
    # Listar conte√∫do do diret√≥rio translations
    run_command('ls -la translations/', 'Conte√∫do do diret√≥rio translations')
    
    # Verificar se existem arquivos .po
    run_command('find translations/ -name "*.po"', 'Procurando arquivos .po')
    
    # Tentar compilar tradu√ß√µes
    print("\n3. Compilando tradu√ß√µes...")
    if not run_command('pybabel compile -d translations -D messages', 'Compilando tradu√ß√µes'):
        print("\n4. Tentando extrair strings primeiro...")
        if run_command('pybabel extract -F babel.cfg -k _l -o messages.pot .', 'Extraindo strings'):
            print("\n5. Atualizando arquivos .po...")
            for lang in ['pt', 'en', 'es']:
                po_file = f'translations/{lang}/LC_MESSAGES/messages.po'
                if os.path.exists(po_file):
                    run_command(f'pybabel update -i messages.pot -d translations -l {lang}', f'Atualizando {lang}')
                else:
                    print(f"‚ö†Ô∏è Arquivo {po_file} n√£o encontrado")
            
            print("\n6. Compilando tradu√ß√µes novamente...")
            run_command('pybabel compile -d translations -D messages', 'Compilando tradu√ß√µes')
    
    # Verificar se a aplica√ß√£o funciona
    print("\n7. Testando aplica√ß√£o...")
    if run_command('python -c "from app import create_app; app, socketio = create_app(); print(\'‚úÖ App OK\')"', 'Testando aplica√ß√£o'):
        print("\nüéâ SUCESSO! Aplica√ß√£o funcionando!")
    else:
        print("\n‚ùå Aplica√ß√£o com problemas. Verifique os logs.")
    
    print("\n" + "=" * 50)
    print("‚úÖ Script de corre√ß√£o conclu√≠do!")

if __name__ == "__main__":
    main()
