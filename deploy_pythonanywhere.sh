#!/bin/bash

# üöÄ Script de Deploy Automatizado para PythonAnywhere
# DocCollab - Vers√£o Final

echo "üöÄ Iniciando deploy do DocCollab no PythonAnywhere..."

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para imprimir mensagens coloridas
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Verificar se estamos no diret√≥rio correto
if [ ! -f "app.py" ]; then
    print_error "Execute este script no diret√≥rio raiz do DocCollab"
    exit 1
fi

print_status "Atualizando c√≥digo do GitHub..."
git pull origin master
if [ $? -eq 0 ]; then
    print_success "C√≥digo atualizado com sucesso"
else
    print_error "Falha ao atualizar c√≥digo"
    exit 1
fi

print_status "Ativando ambiente virtual..."
source venv/bin/activate
if [ $? -eq 0 ]; then
    print_success "Ambiente virtual ativado"
else
    print_error "Falha ao ativar ambiente virtual"
    exit 1
fi

print_status "Instalando/Atualizando depend√™ncias..."
pip3.10 install --user -r requirements.txt
if [ $? -eq 0 ]; then
    print_success "Depend√™ncias instaladas com sucesso"
else
    print_error "Falha ao instalar depend√™ncias"
    exit 1
fi

print_status "Atualizando banco de dados - Vers√µes..."
python3.10 update_db_versions.py
if [ $? -eq 0 ]; then
    print_success "Tabela de vers√µes criada/atualizada"
else
    print_warning "Aviso: Falha ao atualizar tabela de vers√µes (pode j√° existir)"
fi

print_status "Atualizando banco de dados - Chat..."
python3.10 update_db_chat.py
if [ $? -eq 0 ]; then
    print_success "Tabela de chat criada/atualizada"
else
    print_warning "Aviso: Falha ao atualizar tabela de chat (pode j√° existir)"
fi

print_status "Verificando instala√ß√£o do LaTeX..."
which pdflatex
if [ $? -eq 0 ]; then
    print_success "LaTeX encontrado: $(which pdflatex)"
else
    print_warning "LaTeX n√£o encontrado. Instalando..."
    sudo apt-get update
    sudo apt-get install -y texlive-full
    if [ $? -eq 0 ]; then
        print_success "LaTeX instalado com sucesso"
    else
        print_error "Falha ao instalar LaTeX"
    fi
fi

print_status "Verificando arquivo .env..."
if [ -f ".env" ]; then
    print_success "Arquivo .env encontrado"
else
    print_warning "Arquivo .env n√£o encontrado. Criando..."
    cp env.example .env
    print_warning "IMPORTANTE: Configure as vari√°veis no arquivo .env"
fi

print_status "Verificando estrutura do projeto..."
if [ -d "templates" ] && [ -d "static" ] && [ -d "models" ]; then
    print_success "Estrutura do projeto OK"
else
    print_error "Estrutura do projeto incompleta"
    exit 1
fi

print_success "üéâ Deploy preparado com sucesso!"
echo ""
echo "üìã Pr√≥ximos passos manuais:"
echo "1. Acesse o PythonAnywhere Dashboard"
echo "2. V√° para Web ‚Üí WSGI configuration file"
echo "3. Substitua o conte√∫do pelo c√≥digo fornecido em DEPLOY_PYTHONANYWHERE_FINAL.md"
echo "4. Configure as vari√°veis de ambiente no arquivo .env"
echo "5. Clique em 'Reload' para reiniciar a aplica√ß√£o"
echo "6. Acesse: https://123nilmarcastro.pythonanywhere.com"
echo ""
echo "üîß Configura√ß√µes importantes:"
echo "- WSGI: Use o c√≥digo fornecido no guia"
echo "- Static files: Adicione /socket.io/ ‚Üí /home/123nilmarcastro/DocCollab/static"
echo "- Working directory: /home/123nilmarcastro/DocCollab"
echo ""
print_success "DocCollab est√° pronto para produ√ß√£o! üöÄ"
