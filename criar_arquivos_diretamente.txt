# CRIAR ARQUIVOS DIRETAMENTE NO PYTHONANYWHERE
# Copie e cole este comando no console do PythonAnywhere

cd ~/doccollab && source venv/bin/activate && echo "Criando arquivos atualizados..." && echo "1. Atualizando routes/main.py..." && cat > routes/main.py << 'EOF'
from flask import Blueprint, render_template, request, jsonify, redirect, url_for, current_app
from flask_login import login_required, current_user
from models.project import Project
from models.user import User
from models.subscription import Subscription, PlanType
from services.latex_compiler import compile_latex
from utils.permissions import check_plan_limits, require_paid_plan, require_project_limit, require_file_limit
from database import db
import os

main_bp = Blueprint('main', __name__)

@main_bp.route('/')
def index():
    """Página inicial - sempre desloga o usuário"""
    if current_user.is_authenticated:
        from flask_login import logout_user
        logout_user()
    return render_template('index.html')

@main_bp.route('/dashboard')
@login_required
def dashboard():
    """Dashboard do usuário"""
    projects = Project.query.filter_by(user_id=current_user.id).all()
    return render_template('dashboard.html', projects=projects)

@main_bp.route('/project/<int:project_id>')
@login_required
def project_editor(project_id):
    """Editor do projeto"""
    project = Project.query.get_or_404(project_id)
    if project.user_id != current_user.id:
        return jsonify({'error': 'Acesso negado'}), 403
    
    # Carregar conteúdo do arquivo principal
    main_file_path = os.path.join(project.path, 'main.tex')
    content = ''
    if os.path.exists(main_file_path):
        with open(main_file_path, 'r', encoding='utf-8') as f:
            content = f.read()
    
    return render_template('editor.html', project=project, content=content)

@main_bp.route('/pricing')
def pricing():
    """Página de preços acessível a todos"""
    from services.asaas_integration import get_plan_config, get_currency_for_locale
    from flask_babel import get_locale
    
    current_locale = str(get_locale())
    currency = get_currency_for_locale(current_locale)
    
    plans = {}
    for plan_type in ['free', 'monthly', 'quarterly', 'semi_annual', 'annual']:
        config = get_plan_config(plan_type)
        plans[plan_type] = {
            'name': config['name'],
            'price': config[f'price_{currency.lower()}'],
            'currency': currency,
            'features': config['features'],
            'limitations': config.get('limitations', []),
            'savings_percent': config.get('savings_percent', 0)
        }
    
    return render_template('payment.html', plans=plans, current_locale=current_locale)

@main_bp.route('/payment')
@login_required
def payment():
    """Página de pagamentos para usuários logados"""
    from services.asaas_integration import get_plan_config, get_currency_for_locale
    from flask_babel import get_locale
    
    current_locale = str(get_locale())
    currency = get_currency_for_locale(current_locale)
    
    plans = {}
    for plan_type in ['free', 'monthly', 'quarterly', 'semi_annual', 'annual']:
        config = get_plan_config(plan_type)
        plans[plan_type] = {
            'name': config['name'],
            'price': config[f'price_{currency.lower()}'],
            'currency': currency,
            'features': config['features'],
            'limitations': config.get('limitations', []),
            'savings_percent': config.get('savings_percent', 0)
        }
    
    return render_template('payment.html', plans=plans, current_locale=current_locale)

@main_bp.route('/api/upgrade-plan', methods=['POST'])
@login_required
def upgrade_plan():
    """API para upgrade de plano"""
    try:
        data = request.get_json()
        plan_type = data.get('plan_type')
        
        if not plan_type or plan_type not in ['monthly', 'quarterly', 'semi_annual', 'annual']:
            return jsonify({'success': False, 'error': 'Tipo de plano inválido'}), 400
        
        # Simular upgrade (em produção, integrar com ASAAS)
        subscription = current_user.get_subscription()
        if subscription:
            subscription.plan_type = PlanType.PAID
            subscription.is_active = True
        else:
            subscription = Subscription(
                user_id=current_user.id,
                plan_type=PlanType.PAID,
                is_active=True
            )
            db.session.add(subscription)
        
        db.session.commit()
        
        return jsonify({
            'success': True,
            'message': 'Plano atualizado com sucesso!',
            'plan_type': 'paid'
        })
        
    except Exception as e:
        return jsonify({'success': False, 'error': str(e)}), 500

@main_bp.route('/plan-info')
@login_required
def plan_info():
    """Informações do plano atual"""
    try:
        subscription = current_user.get_subscription()
        is_paid = subscription and subscription.is_active and subscription.plan_type.value == 'paid'
        
        limits = check_plan_limits(current_user)
        
        return jsonify({
            'success': True,
            'is_paid': is_paid,
            'plan_name': subscription.plan_name if subscription else 'free',
            'limits': limits
        })
        
    except Exception as e:
        return jsonify({'success': False, 'error': str(e)}), 500
EOF
echo "2. Atualizando services/asaas_integration.py..." && mkdir -p services && cat > services/asaas_integration.py << 'EOF'
def get_plan_config(plan_type):
    plans = {
        'free': {
            'name': 'Free',
            'price_brl': 0,
            'price_usd': 0,
            'features': ['1 project', '1 file', 'Basic editor'],
            'limitations': ['Image uploads', 'Real-time collaboration', 'Version history', 'Priority support']
        },
        'monthly': {
            'name': 'Monthly',
            'price_brl': 10.00,
            'price_usd': 2.00,
            'features': ['Unlimited projects', 'Unlimited files', 'Image uploads', 'Real-time collaboration', 'Version history', 'Priority support'],
            'savings_percent': 0
        },
        'quarterly': {
            'name': 'Quarterly',
            'price_brl': 25.00,
            'price_usd': 5.00,
            'features': ['Unlimited projects', 'Unlimited files', 'Image uploads', 'Real-time collaboration', 'Version history', 'Priority support'],
            'savings_percent': 17
        },
        'semi_annual': {
            'name': 'Semi-Annual',
            'price_brl': 50.00,
            'price_usd': 10.00,
            'features': ['Unlimited projects', 'Unlimited files', 'Image uploads', 'Real-time collaboration', 'Version history', 'Priority support'],
            'savings_percent': 33
        },
        'annual': {
            'name': 'Annual',
            'price_brl': 100.00,
            'price_usd': 20.00,
            'features': ['Unlimited projects', 'Unlimited files', 'Image uploads', 'Real-time collaboration', 'Version history', 'Priority support'],
            'savings_percent': 50
        }
    }
    return plans.get(plan_type, {})

def get_currency_for_locale(locale):
    return 'BRL' if locale == 'pt' else 'USD'
EOF
echo "3. Atualizando templates/base.html..." && cat > templates/base.html << 'EOF'
<!DOCTYPE html>
<html lang="{{ g.locale }}">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{% block title %}{{ _('DocCollab') }}{% endblock %}</title>
    
    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    
    <!-- Custom CSS -->
    <link rel="stylesheet" href="{{ url_for('static', filename='css/style.css') }}">
    <link rel="stylesheet" href="{{ url_for('static', filename='css/responsive.css') }}">
    
    {% block head %}{% endblock %}
</head>
<body>
    <!-- Navbar -->
    <nav class="navbar">
        <div class="navbar-container">
            <div class="navbar-brand">
                <a href="{{ url_for('main.index') }}">
                    <i class="fas fa-file-alt"></i>
                    {{ _('DocCollab') }}
                </a>
            </div>
            
            <div class="navbar-menu">
                <ul class="navbar-nav">
                    {% if current_user.is_authenticated %}
                    <li class="nav-item">
                        <a class="nav-link" href="{{ url_for('main.dashboard') }}">
                            <i class="fas fa-tachometer-alt"></i>
                            {{ _('Dashboard') }}
                        </a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="{{ url_for('main.pricing') }}">
                            <i class="fas fa-tags"></i>
                            {{ _('Pricing') }}
                        </a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="{{ url_for('auth.logout') }}">
                            <i class="fas fa-sign-out-alt"></i>
                            {{ _('Sign out') }}
                        </a>
                    </li>
                    {% else %}
                    <li class="nav-item">
                        <a class="nav-link" href="{{ url_for('auth.login') }}">
                            <i class="fas fa-sign-in-alt"></i>
                            {{ _('Sign in') }}
                        </a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="{{ url_for('auth.register') }}">
                            <i class="fas fa-user-plus"></i>
                            {{ _('Sign up') }}
                        </a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="{{ url_for('main.pricing') }}">
                            <i class="fas fa-tags"></i>
                            {{ _('Pricing') }}
                        </a>
                    </li>
                    {% endif %}
                    <li class="nav-item dropdown">
                        <a class="nav-link dropdown-toggle" href="#" id="langMenu">
                            <i class="fas fa-globe"></i>
                            {{ _('Language') }} ▼
                        </a>
                        <div class="dropdown-menu" id="langDropdown">
                            <a class="dropdown-item" href="{{ url_for('main.set_language', lang='pt') }}">
                                <i class="fas fa-flag"></i> Português
                            </a>
                            <a class="dropdown-item" href="{{ url_for('main.set_language', lang='en') }}">
                                <i class="fas fa-flag"></i> English
                            </a>
                            <a class="dropdown-item" href="{{ url_for('main.set_language', lang='es') }}">
                                <i class="fas fa-flag"></i> Español
                            </a>
                        </div>
                    </li>
                </ul>
            </div>
        </div>
    </nav>

    <!-- Main Content -->
    <main class="main-content">
        {% block content %}{% endblock %}
    </main>

    <!-- Scripts -->
    <script src="{{ url_for('static', filename='js/main.js') }}"></script>
    {% block scripts %}{% endblock %}
</body>
</html>
EOF
echo "4. Compilando traduções..." && pybabel compile -d translations -D messages && echo "5. Corrigindo WSGI..." && sed -i 's/app, socketio = create_app()/app = create_app()/g' /var/www/123nilmarcastro_pythonanywhere_com_wsgi.py && echo "6. Testando aplicação..." && python -c "from app import create_app; app = create_app(); print('App OK')" && echo "Agora va para a aba Web e clique em Reload"
